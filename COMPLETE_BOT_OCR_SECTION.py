#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –ö–û–î –°–ï–ö–¶–ò–ò OCR –ò–ó TELEGRAM –ë–û–¢–ê
–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ ChatGPT - –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
"""

import os
import json
import time
import logging
from typing import List, Dict, Optional
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# === OCR –°–ò–°–¢–ï–ú–´ –ò–ú–ü–û–†–¢–´ ===
try:
    from ultra_fast_ocr import process_screenshot_ultra_fast
    ULTRA_FAST_AVAILABLE = True
    print("‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø OCR —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - 3 OCR –≤—ã–∑–æ–≤–∞ = –í–°–Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
except ImportError as e:
    ULTRA_FAST_AVAILABLE = False
    print(f"‚ö†Ô∏è –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

try:
    from fixed_batch_optimized_pipeline import process_screenshot_fixed
    FIXED_BATCH_AVAILABLE = True
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø Batch OCR —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ - –±—ã—Å—Ç—Ä–æ + –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
except ImportError as e:
    FIXED_BATCH_AVAILABLE = False
    print(f"‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")

try:
    from batch_optimized_pipeline import process_screenshot_batch
    BATCH_PIPELINE_AVAILABLE = True
    print("üèÜ Batch-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π OCR –ø–∞–π–ø–ª–∞–π–Ω –∑–∞–≥—Ä—É–∂–µ–Ω (ChatGPT-5 Final)")
except ImportError as e:
    BATCH_PIPELINE_AVAILABLE = False
    print(f"‚ö†Ô∏è Batch –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

try:
    from enhanced_ocr_pipeline import process_screenshot
    ENHANCED_PIPELINE_AVAILABLE = True
    print("‚úÖ Enhanced OCR Pipeline –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    ENHANCED_PIPELINE_AVAILABLE = False
    print(f"‚ö†Ô∏è Enhanced –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

try:
    from production_tesseract_ocr import ProductionOCR
    production_ocr = ProductionOCR()
    PRODUCTION_OCR_AVAILABLE = True
    print("‚úÖ Production Tesseract OCR –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    PRODUCTION_OCR_AVAILABLE = False
    print(f"‚ö†Ô∏è Production OCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

logger = logging.getLogger(__name__)

# === –í–´–ë–û–† –õ–£–ß–®–ï–ô OCR –°–ò–°–¢–ï–ú–´ ===
def get_best_ocr_function():
    """–í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ OCR –ø–∞–π–ø–ª–∞–π–Ω–∞."""
    if ULTRA_FAST_AVAILABLE:
        return process_screenshot_ultra_fast, "‚ö° –£–õ–¨–¢–†–ê-–ë–´–°–¢–†–ê–Ø: 3 OCR –≤—ã–∑–æ–≤–∞ (1-3s)"
    elif FIXED_BATCH_AVAILABLE:
        return process_screenshot_fixed, "–ò–°–ü–†–ê–í–õ–ï–ù–ê: –ë—ã—Å—Ç—Ä–æ + –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (2-5s)"
    elif BATCH_PIPELINE_AVAILABLE:
        return process_screenshot_batch, "Batch Pipeline (2-5s target)"
    elif ENHANCED_PIPELINE_AVAILABLE:
        return process_screenshot, "Enhanced Pipeline (8-10s)"
    elif PRODUCTION_OCR_AVAILABLE:
        return production_ocr.process_screenshot, "Production Pipeline (15-25s)"
    else:
        return None, "NO OCR AVAILABLE"

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
ocr_function, method_name = get_best_ocr_function()
print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {method_name}")

# === –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–ö–†–ò–ù–®–û–¢–ê ===
@dp.message_handler(content_types=['photo'])
async def handle_screenshot(message: types.Message):
    """
    –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –û–ë–†–ê–ë–û–¢–ö–ê –°–ö–†–ò–ù–®–û–¢–ê STANDOFF 2
    –¢–£–¢ –ü–†–û–ò–°–•–û–î–ò–¢ –û–°–ù–û–í–ù–ê–Ø –ú–ê–ì–ò–Ø OCR
    """
    user_id = str(message.from_user.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if user_id not in users:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file_bytes = await bot.download_file(file_info.file_path)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer(
            f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...\n"
            f"üìä –ú–µ—Ç–æ–¥: {method_name}\n"
            f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~3-8 —Å–µ–∫—É–Ω–¥"
        )
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        known_players = []
        for uid, user_data in users.items():
            if isinstance(user_data, dict):
                # –î–æ–±–∞–≤–ª—è–µ–º Standoff 2 ID
                if user_data.get('standoff2_id'):
                    known_players.append(user_data['standoff2_id'])
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ –∏–º—è
                if user_data.get('game_name'):
                    known_players.append(user_data['game_name'])
        
        logger.info(f"Screenshot processing started by {user_id}, known players: {len(known_players)}")
        
        # === –û–°–ù–û–í–ù–ê–Ø OCR –û–ë–†–ê–ë–û–¢–ö–ê - –ó–î–ï–°–¨ –ü–†–û–ë–õ–ï–ú–ê! ===
        if ocr_function:
            # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes = file_bytes.read()
            
            # –í–´–ó–´–í–ê–ï–ú OCR –°–ò–°–¢–ï–ú–£
            result = ocr_function(image_bytes, known_players)
            
            processing_time = time.time() - start_time
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"OCR completed in {processing_time:.2f}s: success={result.get('success')}")
            
            if result.get('success'):
                await process_ocr_result(message, result, processing_msg, processing_time)
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                await processing_msg.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n"
                    f"–í—Ä–µ–º—è: {processing_time:.1f}—Å"
                )
        else:
            await processing_msg.edit_text("‚ùå OCR —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"Screenshot processing error: {e}")
        processing_time = time.time() - start_time if 'start_time' in locals() else 0
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
            f"–í—Ä–µ–º—è: {processing_time:.1f}—Å\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

async def process_ocr_result(message: types.Message, result: Dict, processing_msg, processing_time: float):
    """
    –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê OCR - –ü–û–ö–ê–ó–´–í–ê–ï–¢ –ß–¢–û –ò–ú–ï–ù–ù–û –ù–ï –†–ê–ë–û–¢–ê–ï–¢
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        score = result.get('score')
        map_name = result.get('map') 
        players = result.get('players', [])
        winner_side = result.get('winner_side', 'unknown')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        has_score = bool(score and score != 'None')
        has_map = bool(map_name and map_name != 'None')
        has_players = len(players) >= 8  # –ú–∏–Ω–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        quality_score = 0
        if has_score:
            quality_score += 30
        if has_map:
            quality_score += 30
        if has_players:
            quality_score += 40
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_text = f"üìä **–†–ï–ó–£–õ–¨–¢–ê–¢ OCR –û–ë–†–ê–ë–û–¢–ö–ò**\n\n"
        result_text += f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.2f}—Å\n"
        result_text += f"üéØ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_score}%\n\n"
        
        # –°—á–µ—Ç
        if has_score:
            result_text += f"üèÜ –°—á–µ—Ç: **{score}** (–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_side})\n"
        else:
            result_text += f"‚ùå –°—á–µ—Ç: –ù–µ –Ω–∞–π–¥–µ–Ω\n"
        
        # –ö–∞—Ä—Ç–∞
        if has_map:
            result_text += f"üó∫Ô∏è –ö–∞—Ä—Ç–∞: **{map_name}**\n"
        else:
            result_text += f"‚ùå –ö–∞—Ä—Ç–∞: –ù–µ –Ω–∞–π–¥–µ–Ω–∞\n"
        
        # –ò–≥—Ä–æ–∫–∏
        result_text += f"üë• –ò–≥—Ä–æ–∫–∏: {len(players)}/10\n\n"
        
        if players:
            result_text += "**–ù–ê–ô–î–ï–ù–ù–´–ï –ò–ì–†–û–ö–ò:**\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            top_players = [p for p in players if p.get('team') == 'top']
            bottom_players = [p for p in players if p.get('team') == 'bottom']
            
            result_text += "üîµ **–í–µ—Ä—Ö–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:**\n"
            for i, player in enumerate(top_players[:5], 1):
                name = player.get('raw', 'Unknown')[:20]
                matched = player.get('matched')
                if matched:
                    result_text += f"{i}. {name} ‚Üí **{matched}**\n"
                else:
                    result_text += f"{i}. {name}\n"
            
            result_text += "\nüî¥ **–ù–∏–∂–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:**\n"
            for i, player in enumerate(bottom_players[:5], 1):
                name = player.get('raw', 'Unknown')[:20]
                matched = player.get('matched')
                if matched:
                    result_text += f"{i}. {name} ‚Üí **{matched}**\n"
                else:
                    result_text += f"{i}. {name}\n"
        else:
            result_text += "‚ùå **–ò–ì–†–û–ö–ò –ù–ï –ù–ê–ô–î–ï–ù–´**\n"
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        result_text += f"\nüîß **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:**\n"
        result_text += f"–ú–µ—Ç–æ–¥: {method_name}\n"
        
        if quality_score < 70:
            result_text += "‚ö†Ô∏è **–ù–ò–ó–ö–û–ï –ö–ê–ß–ï–°–¢–í–û –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø**\n"
            if not has_score:
                result_text += "- –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
            if not has_map:
                result_text += "- –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
            if not has_players:
                result_text += f"- –ú–∞–ª–æ –∏–≥—Ä–æ–∫–æ–≤ ({len(players)}/10)\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_msg.edit_text(result_text, parse_mode='Markdown')
        
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        if quality_score < 70:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"retry_ocr_{message.message_id}"))
            keyboard.add(InlineKeyboardButton("üìû –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_problem"))
            
            await message.answer(
                "‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∏–∑–∫–æ–µ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?",
                reply_markup=keyboard
            )
    
    except Exception as e:
        logger.error(f"Error processing OCR result: {e}")
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR\n"
            f"–í—Ä–µ–º—è: {processing_time:.2f}—Å\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )

# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
@dp.callback_query_handler(lambda c: c.data.startswith('retry_ocr_'))
async def retry_ocr_processing(callback_query: types.CallbackQuery):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ OCR"""
    await callback_query.answer("üîÑ –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

@dp.callback_query_handler(lambda c: c.data == 'report_problem')
async def report_ocr_problem(callback_query: types.CallbackQuery):
    """–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ OCR"""
    await callback_query.answer("üìû –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞")

if __name__ == "__main__":
    print("üéØ OCR —Å–µ–∫—Ü–∏—è Telegram –±–æ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print(f"üìä –ê–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {method_name}")
    print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:")
    print("1. OCR –∑–∞–Ω–∏–º–∞–µ—Ç 7-35 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 2-5")
    print("2. –ù–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å—á–µ—Ç –∏ –∫–∞—Ä—Ç—É")
    print("3. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å ChatGPT –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏!")