#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ OCR.
–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ cron –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫.
"""

import os
import sys
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)) + "/..")

from golden_test_runner import main as run_golden_test

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    config_path = Path(__file__).parent / "monitoring_config.json"
    with open(config_path, "r", encoding="utf-8") as f:
        return json.load(f)

def check_alerts(summary_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    
    with open(summary_path, "r", encoding="utf-8") as f:
        summary = json.load(f)
    
    config = load_config()
    targets = config["monitoring"]["performance_targets"]
    
    alerts = []
    stats = summary["stats"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if stats.get("average_time", 0) > targets["max_processing_time"]:
        alerts.append(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å: {stats['average_time']:.2f}—Å > {targets['max_processing_time']}—Å")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    if stats.get("success_rate", 0) < targets["min_success_rate"]:
        alerts.append(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –Ω–∏–∂–µ —Ü–µ–ª–∏: {stats['success_rate']:.1%} < {targets['min_success_rate']:.1%}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
    if stats.get("average_quality", 0) < targets["min_accuracy"]:
        alerts.append(f"‚ö†Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∂–µ —Ü–µ–ª–∏: {stats['average_quality']:.1%} < {targets['min_accuracy']:.1%}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ ChatGPT-5
    if stats.get("chatgpt5_achievement_rate", 0) < targets["chatgpt5_target_achievement"]:
        alerts.append(f"‚ö†Ô∏è –¶–µ–ª—å ChatGPT-5 –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–æ: {stats['chatgpt5_achievement_rate']:.1%} < {targets['chatgpt5_target_achievement']:.1%}")
    
    if alerts:
        alert_file = Path(__file__).parent / "alerts" / f"alert_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        with open(alert_file, "w", encoding="utf-8") as f:
            f.write("üö® –ú–û–ù–ò–¢–û–†–ò–ù–ì OCR: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´\n\n")
            f.write("\n".join(alerts))
            f.write(f"\n\n–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üö® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç: {alert_file}")
        
        for alert in alerts:
            print(alert)
    else:
        print("‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    
    print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ OCR - {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(Path(__file__).parent.parent)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        run_golden_test()
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
        import glob
        summaries = glob.glob("golden_test_summary_*.json")
        if summaries:
            latest_summary = max(summaries, key=os.path.getctime)
            check_alerts(latest_summary)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫—É reports
            reports_dir = Path("golden/reports")
            for file_pattern in ["golden_test_results_*.csv", "golden_test_summary_*.json"]:
                for file_path in glob.glob(file_pattern):
                    shutil.move(file_path, reports_dir / os.path.basename(file_path))
                    
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        error_file = Path("golden/alerts") / f"error_{time.strftime('%Y%m%d_%H%M%S')}.txt"
        with open(error_file, "w", encoding="utf-8") as f:
            f.write(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ OCR:\n\n{str(e)}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
